// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // Uses connection pooling
  url       = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id        String     @id @default(cuid())
  clerkId   String     @unique
  fullName  String
  username  String     @unique
  email     String     @unique
  imageUrl  String
  joinedAt  DateTime   @default(now())
  questions Question[]
  tags      Tag[]
}

model Tag {
  id          String     @id @default(cuid()) // Primary key
  name        String     @unique
  description String
  createdOn   DateTime   @default(now())
  questions   Question[]
  users       User[]
}

model Question {
  id        String @id @default(cuid()) // Primary key
  title     String
  content   String
  tags      Tag[]
  views     Int
  upvotes   Int
  downvotes Int

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  createdAt DateTime @default(now())
}

// model TagsOnQuestions {
//   question   Question @relation(fields: [questionId], references: [id])
//   questionId String
//   tag        Tag      @relation(fields: [tagId], references: [id])
//   tagId      String

//   @@id([questionId, tagId])
// }
