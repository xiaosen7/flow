// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  // Uses connection pooling
  url       = env("POSTGRES_PRISMA_URL")
  // Uses direct connection, ⚠️ make sure to keep this to `POSTGRES_URL_NON_POOLING`
  // or you'll have dangling databases from migrations
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id               String  @id @default(cuid())
  clerkId          String  @unique
  fullName         String
  username         String  @unique
  email            String  @unique
  imageUrl         String
  portfolioWebsite String?
  location         String?
  bio              String?
  reputation       Int     @default(0)

  createdAt DateTime @default(now())

  followedTags Tag[]
  createdTags  Tag[] @relation("UserTags")

  questions         Question[] @relation("UserQuestions")
  upvoteQuestions   Question[] @relation("UserUpvoteQuestions")
  downvoteQuestions Question[] @relation("UserDownvoteQuestions")
  collections       Question[] @relation("collections")

  answers         Answer[] @relation("UserAnswers")
  upvoteAnswers   Answer[] @relation("UserUpvoteAnswers")
  downVoteAnswers Answer[] @relation("UserDownvoteAnswers")
}

model Tag {
  id          String     @id @default(cuid()) // Primary key
  name        String     @unique
  description String
  createdAt   DateTime   @default(now())
  questions   Question[]
  followers   User[]
  creator     User       @relation("UserTags", fields: [creatorId], references: [id])
  creatorId   String
}

model Question {
  id         String   @id @default(cuid()) // Primary key
  title      String
  content    String
  tags       Tag[]
  answers    Answer[]
  views      Int
  upvotes    User[]   @relation("UserUpvoteQuestions")
  downvotes  User[]   @relation("UserDownvoteQuestions")
  collectors User[]   @relation("collections")

  author   User   @relation("UserQuestions", fields: [authorId], references: [id])
  authorId String

  createdAt DateTime @default(now())
}

model Answer {
  id        String   @id @default(cuid()) // Primary key
  content   String
  createdAt DateTime @default(now())

  author    User   @relation("UserAnswers", fields: [authorId], references: [id])
  authorId  String
  upvotes   User[] @relation("UserUpvoteAnswers")
  downvotes User[] @relation("UserDownvoteAnswers")

  question   Question @relation(fields: [questionId], references: [id])
  questionId String
}
